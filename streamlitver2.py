# -*- coding: utf-8 -*-
"""Copy of EEP 105 Final Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V5CFEmIkMn4EleoCwmvKwguHEDa-u1kk
"""


# Import packages
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from sklearn.preprocessing import StandardScaler

# -- Streamlit App --
st.title("Group Project: Dashboard")
st.write("Amanda Yun + Chloe Choi's Dashboard")

# Load data from GitHub
@st.cache_data
def load_data():
    df_co2 = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/yearly_co2_emissions_1000_tonnes.csv")
    df_gdp = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/gdp_per_capita_yearly_growth.csv")
    df_en = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/energy_use_per_person.csv")
    df_nd = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/sk_natural_disaster_data.csv")
    df_temp = pd.read_csv("https://raw.githubusercontent.com/AmandaYun5/EEP-105-Final-Project-Data/refs/heads/main/sk_temp_data.csv")
    return df_co2, df_gdp, df_en, df_nd, df_temp

df_co2, df_gdp, df_en, df_nd, df_temp = load_data()


"""# Data Wrangling"""

# Clean and tidy the CO2 data
CO2_emissions_long = pd.melt(df_co2, id_vars=['country'], var_name='Year', value_name='Emissions')
df_co2_c = (
    CO2_emissions_long
    .rename(columns={'country': 'Country'})
    .assign(Year=lambda df: pd.to_numeric(df['Year']),
            Label="CO2 Emissions (Metric Tons)")
    .dropna(subset=['Emissions'])
)

# Clean and tidy the GDP data
df_gdp_long = pd.melt(df_gdp, id_vars=['country'], var_name='Year', value_name='GDP per capita')
df_gdp_c = (
    df_gdp_long
    .rename(columns={'country': 'Country'})
    .assign(Year=lambda df: pd.to_numeric(df['Year']),
            Label="GDP per Capita Yearly Growth")
    .dropna(subset=['GDP per capita'])
)

# Clean and tidy the Energy use data
df_en_long = pd.melt(df_en, id_vars=['country'], var_name='Year', value_name='Energy Use PP')
df_en_c = (
    df_en_long
    .rename(columns={'country': 'Country'})
    .assign(Year=lambda df: df['Year'].astype(int),
            Label="Energy Use (kg, oil-eq./capita)")
    .dropna(subset=['Energy Use PP'])
)

# Clean and tidy the Disasters data
df_nd = df_nd.loc[:, ["Start Year", "Disaster Type"]]
df_nd = df_nd.groupby("Start Year").agg("Disaster Type").count().reset_index()
df_nd["Country"] = "South Korea"
df_nd["Indicator"] = "Disasters"
df_nd["Label"] = "Number of Disasters"
df_nd_c = df_nd.rename(columns={"Start Year": "Year", "Disaster Type": "Value"})

# Clean and tidy the Temperature data
df_no_identifiers = df_temp.drop(columns=['code', 'name'])
df_temp_long = df_no_identifiers.melt(var_name='year', value_name='temperature')
df_temp_long["Country"] = "South Korea"
df_temp_long["Indicator"] = "Temperature"
df_temp_long["Label"] = "Temperature (Celsius)"
df_temp_long = df_temp_long.rename(columns={"year": "Year", "temperature": "Value"})
df_temp_long["Year"] = df_temp_long["Year"].str[:4].astype("int64")
df_temp_c = df_temp_long[["Country", "Year", "Indicator", "Value", "Label"]]

# Join all dataframes
data_wide = pd.merge(pd.merge(df_co2_c, df_gdp_c, on=['Country', 'Year', 'Label'], how='outer'),
                      df_en_c, on=['Country', 'Year', 'Label'], how='outer')
data_long = data_wide.melt(
    id_vars=['Country', 'Year'],
    var_name='Indicator',
    value_vars=['Emissions', 'GDP per capita', 'Energy Use PP'],
    value_name="Value"
)
data_long['Label'] = data_long['Indicator'].map({
    'Emissions': 'CO2 Emissions (Metric Tons)',
    'GDP per capita': 'GDP per Capita Yearly Growth',
    'Energy Use PP': 'Energy Use (kg, oil-eq./capita)'
})

data_long = pd.concat([data_long, df_nd_c, df_temp_c]).dropna()
data_long['Country'] = data_long['Country'].astype('category')
Final_df = data_long.dropna(subset=['Value']).sort_values(by='Country').reset_index(drop=True)
Final_df['Region'] = np.where(Final_df['Country'] == 'South Korea', 'South Korea', 'Rest of the World')


"""# Data Visualization"""

# Plot 1: World CO2 Emissions per Year
st.subheader("Total CO2 Emissions Over Time")
df_co2_plot_agg = Final_df.query(
    "Indicator == 'Emissions'").groupby("Year", as_index=False)[["Value"]].sum()
fig, ax = plt.subplots(figsize=(6, 4))
ax.plot(df_co2_plot_agg["Year"], df_co2_plot_agg["Value"], color='black')
ax.set_title("World CO2 Emissions per Year (1751-2014)")
ax.set_xlabel("Year")
ax.set_ylabel("Emissions (Metric Tons)")
ax.set_xticks(np.arange(1700, 2100, 100))
ax.ticklabel_format(style='plain', axis='y')
st.pyplot(fig)

# Plot 2: Country CO2 Emissions per Year
st.subheader("Country CO2 Emissions per Year")
df_co2_plot_country = Final_df.query("Indicator == 'Emissions'")
fig, ax = plt.subplots(figsize=(8, 5))
for country in df_co2_plot_country['Country'].unique():
    subset = df_co2_plot_country[df_co2_plot_country['Country'] == country]
    ax.plot(subset['Year'], subset['Value'], color='gray', alpha=0.4)
df_sk_plot = df_co2_plot_country.query("Country == 'South Korea'")
ax.plot(df_sk_plot['Year'], df_sk_plot['Value'], color='blue', linewidth=2)
ax.set_title("Country CO2 Emissions per Year (1751-2014)")
ax.set_xlabel("Year")
ax.set_ylabel("Emissions (Metric Tons)")
ax.set_xticks(np.arange(1700, 2100, 100))
ax.ticklabel_format(style='plain', axis='y')
st.pyplot(fig)

# Plot 3: Top 10 Countries' CO2 Emissions
st.title("Top 10 Countries' CO2 Emissions")
last_pts = df_top10_c = Final_df.query("Indicator == 'Emissions' and Year == 2014").sort_values("Value", ascending=False).iloc[:10]
df_top10 = Final_df.query("Indicator == 'Emissions' and Country in @last_pts['Country'].tolist() and Year >= 1900")

fig, ax = plt.subplots(figsize=(8, 6))
for country in df_top10['Country'].unique():
    subset = df_top10[df_top10['Country'] == country]
    ax.plot(subset['Year'], subset['Value'], label=country)
ax.set_title("Top 10 Emissions-producing Countries in 2014 (1900-2014)")
ax.set_xlabel("Year")
ax.set_ylabel("Emissions (Metric Tons)")
ax.legend(title='Country', loc='upper left', bbox_to_anchor=(1, 1))
st.pyplot(fig)


# Plot 4: Tile Plot of Top 10 CO2 Emissions
st.title("Tile Plot of Top 10 CO2 Emissions")
df_top10_asc = df_top10.copy()
df_top10_asc_sort = df_top10_asc.sort_values(by="Country")
df_top10_asc_sort["Log Value"] = np.log(df_top10_asc_sort['Value'])
df_top10_asc_sort = df_top10_asc_sort.query("Year >= 1900")
df_top10_pivot = df_top10_asc_sort.pivot_table(index='Country', columns='Year', values='Log Value')
fig, ax = plt.subplots(figsize=(10, 6))
cax = ax.pcolormesh(df_top10_pivot.columns, df_top10_pivot.index, df_top10_pivot.values, cmap='viridis')
fig.colorbar(cax, ax=ax, label="Log Value")
ax.set_title("Top 10 CO2 Emissions-producing Countries (1900-2014)")
ax.set_xlabel("Year")
ax.set_ylabel("Country")
st.pyplot(fig)


# Plot 5: 3x2 Facet Plot
st.title("Distribution of Indicators by Year and Value")
df_3_2 = Final_df[Final_df["Indicator"].isin(["Emissions", "Energy Use PP", "GDP per capita"])]
df_3_2["Value"] = pd.to_numeric(df_3_2["Value"], errors="coerce")
regions = df_3_2["Region"].unique()
indicators = df_3_2["Indicator"].unique()
fig, axes = plt.subplots(nrows=len(indicators), ncols=len(regions), figsize=(12, 10), sharex='col')
for i, indicator in enumerate(indicators):
    for j, region in enumerate(regions):
        ax = axes[i, j]
        subset = df_3_2.query("Indicator == @indicator and Region == @region")
        for country in subset['Country'].unique():
            ax.plot(subset.query("Country == @country")["Year"], subset.query("Country == @country")["Value"], color='black', linewidth=0.3)
        ax.set_title(f"{region} - {indicator}")
        if j == 0:
            ax.set_ylabel("Indicator Value")
        if i == len(indicators) - 1:
            ax.set_xlabel("Year")
fig.tight_layout()
st.pyplot(fig)


# Plot 6: SK Emissions and Temperature Facet Plot
st.title("South Korea Emissions and Temperature")
df_sk_co2_temp = Final_df[Final_df["Country"] == "South Korea"].query("Indicator in ['Emissions', 'Temperature'] and 2014 >= Year >= 1980")
fig, axes = plt.subplots(1, 2, figsize=(10, 4), sharex=True, gridspec_kw={'wspace': 0.3})
indicators_to_plot = df_sk_co2_temp['Indicator'].unique()
for i, indicator in enumerate(indicators_to_plot):
    ax = axes[i]
    subset = df_sk_co2_temp[df_sk_co2_temp['Indicator'] == indicator]
    ax.scatter(subset['Year'], subset['Value'])
    ax.set_title(indicator)
    ax.set_xlabel("Year")
    ax.set_ylabel("Value")
    z = np.polyfit(subset['Year'], subset['Value'], 2)
    p = np.poly1d(z)
    ax.plot(subset['Year'], p(subset['Year']), "b-")
st.pyplot(fig)


# Data Analysis for scaled plot
df_sk_co2_temp_wide = df_sk_co2_temp.pivot(columns="Indicator", values="Value", index="Year")
df_sk_co2_temp_wide_std = pd.DataFrame(StandardScaler().fit_transform(df_sk_co2_temp_wide),
                                        columns=df_sk_co2_temp_wide.columns,
                                        index=df_sk_co2_temp_wide.index)

# Plot 7: Scaled Emissions vs. Temperature
st.title("Scaled Emissions vs. Temperature")
fig, ax = plt.subplots(figsize=(6, 4))
ax.scatter(df_sk_co2_temp_wide_std["Emissions"], df_sk_co2_temp_wide_std["Temperature"])
ax.set_title("SK CO2 Emissions and Temperature (1980-2014)")
ax.set_xlabel("Scaled Emissions (Metric Tonnes)")
ax.set_ylabel("Scaled Temperature (Fahrenheit)")
m, b = np.polyfit(df_sk_co2_temp_wide_std["Emissions"], df_sk_co2_temp_wide_std["Temperature"], 1)
ax.plot(df_sk_co2_temp_wide_std["Emissions"], m*df_sk_co2_temp_wide_std["Emissions"] + b, color='blue', linestyle='--')
st.pyplot(fig)


# Plot 8: Summary Plot
st.title("Summary Plots")
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 10))
# World CO2 Emissions
axes[0, 0].plot(df_co2_plot_agg["Year"], df_co2_plot_agg["Value"])
axes[0, 0].set_title("World CO2 Emissions")
axes[0, 0].ticklabel_format(style='plain', axis='y')
# Scaled Scatter Plot
axes[0, 1].scatter(df_sk_co2_temp_wide_std["Emissions"], df_sk_co2_temp_wide_std["Temperature"])
axes[0, 1].set_title("Scaled Emissions vs. Temp")
# SK Emissions and Temperature Facet Plot
axes[1, 0].scatter(df_sk_co2_temp[df_sk_co2_temp['Indicator']=='Emissions']['Year'], df_sk_co2_temp[df_sk_co2_temp['Indicator']=='Emissions']['Value'])
axes[1, 0].set_title("SK Emissions")
# SK Temperature Facet Plot
axes[1, 1].scatter(df_sk_co2_temp[df_sk_co2_temp['Indicator']=='Temperature']['Year'], df_sk_co2_temp[df_sk_co2_temp['Indicator']=='Temperature']['Value'])
axes[1, 1].set_title("SK Temperature")
fig.tight_layout()
st.pyplot(fig)
